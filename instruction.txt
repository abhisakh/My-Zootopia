Zootopia
meme
Overview
You‚Äôve learned how to create simple websites with HTML and CSS. Now
it‚Äôs time to combine what you‚Äôve learned with Python!
Templating
We‚Äôll practice an important concept when creating web pages: templating.
Templating refers to the process of using a template to generate HTML
code dynamically. For example, if we have a list of animals and their
information (type, location, color‚Ä¶) in our Python code, templating
allows us to ‚Äúplug‚Äù this information into a web page dynamically.
Expected Output
At the end of this exercise, you will create a simple web page containing
information about animals.
üëÄ To view the expected output, Click here.
The HTML web page was generated from the JSON file at the top left pane.

---------------------------------------------------------------------------

Assessment Instructions
Development Environment: You are expected to work in PyCharm for this assessment,
not in Codio.

Version Control: Your project should be a git repository. You are expected to
make commits for every step and push it to GitHub. Don‚Äôt worry, we will be r
eminding you in case you forget.

End Result: In the end we will not be copying our code back to Codio as usual.
The way we bring our project back to Codio will be with git clone. This will
ensure that our commit history is brought over as well.

Why are we using Git and GitHub?
Version Control: Git and GitHub are industry-standard tools for version control.
By using them in this assessment, you will practice managing code changes and
pushing to a remote repo.

Portfolio Building: Your GitHub profile is a showcase of your skills and projects
to potential employers. Completing this assessment and pushing your code to
GitHub will enrich your portfolio and demonstrate your programming skills.

Deployment Preparation: Pushing your code to GitHub brings you one step closer
to deployment. Understanding the process of pushing code to a remote repository
is essential for deploying web applications in real-world scenarios.

Why Commits for Every Step?
Committing your code after every step ensures that you maintain a clear history
of changes throughout the assessment. This practice allows for easy tracking of
progress, and provides a safety net for reverting changes if necessary. Feel
free to make more commits along the way if you want! Click here for the Git / Github
Cheat Sheet.

-------------------------------------------------------------------------------

First things first
In this step we will be bringing the Codio files over to PyCharm, initializing
the project as a git repository, connecting it to a remote repository on Github,
doing our first commit and our first push.

Code Transfer
On the left side, in the file tree, you can see the three files we will need for
this project:

animals_data.json
animals_template.html
animals_web_generator.py (empty)

Copy the files to a PyCharm project folder.

Git Initializing

Use git init to make your PyCharm project folder into a local git repository.
Use git status to see if you have done this successfully. Use git add .
and git commit -m "First commit" to make your first commit.

Make sure you are in the right folder
Before you initialize a git repository make sure that your terminal is in the
project folder - the folder that only has our three mentioned files. You can c
heck if this is indeed the case with the ls command.

Git to Github
Create a Github repository called "My-Zootopia". Make it a public repository.
This is very important and will ensure that we will be able to clone our
repo back to Codio in the end. Do not add a README.md, because we do not want a
commit.
Follow the instructions on Github that say ‚Äú‚Ä¶or push an existing repository from
the command line‚Äù
The commands you need to run in the terminal should look something like this:

git remote add origin git@github.com:yourname/My-Zootopia.git
git branch -M main
git push -u origin main

Note: This will not work unless you have properly authenticated and connected
your Git to GitHub.
Congrats!
If everything went smoothly you have pushed your code to the remote repo.
After you refresh your github repository it should look something like this:

-----------------------------------------------------------------------

Step 1 - Print Data From File
Now that we are finished with the Git prep we can get started with the actual
assessment. Our end goal is generating HTML, but this step is not related to
HTML yet. We‚Äôre just going to print the data that we have in the JSON file.

Data Description
In the file animals_data.json (look at the file tree), you have a data structure
that describes types of foxes. Observe the data, you can assist an online JSON
parser if you need it.

Reading the data
To read the data from the file, import the json library at the top of your Python
code:

import json
And then define the function:

def load_data(file_path):
  """ Loads a JSON file """
  with open(file_path, "r") as handle:
    return json.load(handle)

Now when you want to read the content of the file in your code, call the function:
animals_data = load_data('animals_data.json')
Try to read the content of the file with Python and printing it. You should get a
list which has nested structures inside of it.

Task
Write a simple Python script that reads the content of animals_data.json,
iterates through the animals, and for each one prints:

Name
Diet
The first location from the locations list
Type


If one of these fields doesn‚Äôt exist, don‚Äôt print it.
Example output

Name: American Foxhound
Diet: Omnivore
Location: North-America
Type: Hound

Name: Arctic Fox
Diet: Carnivore
Location: Eurasia
Type: Mammal

Name: Cross Fox
Diet: Carnivore
Location: North-America
Type: mammal

...
The English Foxhound doesn‚Äôt have a type field, and therefore we will not
print this field:
...

Name: English Foxhound
Diet: Omnivore
Location: Europe

...
Commit reminder
When you feel like you are finished with step 1 commit your changes with a
message akin to ‚Äúaccess data from json file‚Äù. Push your changes to the remote
repository.
--------------------------------------------------------------------

Step 2 - Writing HTML
In this step, we are going to write the output from the previous step into our
HTML page. It‚Äôs not going to be pretty yet, don‚Äôt worry, it will just be inside
our HTML page.

HTML Template
In the file animals_template.html you have a template of an HTML page. We will
add our animals information to this page using Python.

Viewing HTML in Codio
To view the HTML in Codio, right click on the file, and click on "Preview Static":

Preview Static
A new browser tab should open with the HTML page.

Viewing HTML in PyCharm
Right click on the HTML file, and choose from the menu: Open In->Browser->Chrome.
alt text

A new browser tab should open with the HTML page.
Template Content
Currently, the template contains nothing but basic HTML skeleton and some CSS.
At the bottom of the file, you‚Äôll find the string __REPLACE_ANIMALS_INFO__:
<body>
    <h1>My Animal Repository</h1>
    <ul class="cards">
        __REPLACE_ANIMALS_INFO__
    </ul>
</body>
In this step, we will replace the string with the information that we extracted
in the previous step. The final output should look similar to that:
    <body>
        <h1>My Animal Repository</h1>
        <ul class="cards">
Name: American Foxhound
Diet: Omnivore
Location: North-America
Type: Hound

Name: Arctic Fox
Diet: Carnivore
Location: Eurasia
Type: Mammal
...
    </ul>
</body>

===============
How to do that?
===============
Change your Python script to do the following:

1. Read the content of the template, animals_template.html.
2. Generate a string with the animals‚Äô data.
3. Replace __REPLACE_ANIMALS_INFO__ with the generated string.
4. Write the new HTML content to a new file, animals.html.


Overwhelmed? Don‚Äôt worry, we have the detailed instructions below, step-by-step.

1. Read the content of the template
Since an HTML file is just a regular file with text in it, you know how to do it,
with open and read commands. If you don‚Äôt remember, go back to ‚ÄúReading Files‚Äù
lesson, or just search online.

2. Generate a string with the animals‚Äô data
In the previous step, you printed the data directly to the screen. Your code probably looked similar to this:
for animal_data in data:
    print(f"Name: {animal_data['name']}")
    print(f"Diet: {animal_data['characteristics']['diet']}")
    ...
We now want to generate a string with all of this information. Change your code to
create a string with all the animals‚Äô data, similar to that:
output = ''  # define an empty string
for animal_data in data:
    # append information to each string
    output += f"Name: {animal_data['name']}\n"
    output += f"Diet: {animal_data['characteristics']['diet']}\n"
    ...
print(output)
Notice that we had to add \n (newline) at the end of each line. The print statement
 add \n automatically at the end of each line, and since we don‚Äôt use it, we have
 to add it manually.

3. Replace __REPLACE_ANIMALS_INFO__ with the generated string
Now you have the HTML template string from (1), and the animals output string
from (2), you can replace the text __REPLACE_ANIMALS_INFO__ with the animals output.
Use the replace method, read about it in this link.

4. Write the new HTML content to a new file
You are left with a string containing the new HTML output. If you print it to the
screen, you should see something similar to:
    <body>
        <h1>My Animal Repository</h1>
        <ul class="cards">
Name: American Foxhound
Diet: Omnivore
Location: North-America
Type: Hound

Name: Arctic Fox
Diet: Carnivore
Location: Eurasia
Type: Mammal
...
    </ul>
</body>
Now you can just write this string to a file, called animals.html.
Open it in the browser and confirm that the information was written.

Step Summary
You wrote your first HTML template, congratulations!
If you open it in the browser, you should see something similar to this:
alt text
Happy from the result? We hope you are not.
Don‚Äôt be disappointed, in the next step we‚Äôll fix that.
Commit reminder
Commit your changes with a message akin to ‚Äúbring animal data into html‚Äù.
Push your changes to the remote repository.
-----------------------------------------------------------------------------